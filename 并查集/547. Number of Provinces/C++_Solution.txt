class Solution 
{
    
private:
    int father[210];  // 题目1 <= n <= 200
    int n;  // 边的数量
    
    void init()  // 并查集初始化
    {
        for(int i=0 ; i<n ; i++)
        {
            father[i] = i;
        }
    }
    
    int find(int u)  // 并查集里寻根的过程
    {
        return u == father[u] ? u:father[u] = find(father[u]);
    }
    
    void join(int u , int v)  // 将v->u 这条边加入并查集
    {
        u = find(u);
        v = find(v);
        if( u == v )
        {
            return;
        }
        father[v] = u;
    }
    
    bool same(int u , int v) // 判断 u 和 v是否找到同一个根，本题用不上
    {
        u = find(u);
        v = find(v);
        return u == v;
    }
    
public:
    int findCircleNum(vector<vector<int>>& isConnected) 
    {
        n = isConnected.size();
        init();
        
        for(int i=0 ; i<n ; i++)
        {
            for(int j=i+1 ; j<n ; j++)
            {
                if(isConnected[i][j])
                {
                    join(i,j);
                }
            }
        }// 此时已经并查集已经把边链接好了 
        
        unordered_set<int> uset;// 容积有多少个没有链接的省份
        for(int i=0 ; i<n ; i++)
        {
            uset.insert(find(i));
        }
        
        return uset.size();
    }
};