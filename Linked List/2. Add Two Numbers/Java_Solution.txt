/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // 创建新的链表存储结果
        ListNode res = new ListNode(0);
        // 创建临时链表
        ListNode cur = res;
        // 创建变量进位值为 carry
        int carry = 0;
        
        
        while(l1 != null || l2 != null || carry > 0){
            // 设置两个链表当前位置的数字为 x，y
            // 如果两个链表的长度不同，就在短链表的末尾补0
            int x = l1 == null ? 0 : l1.val;
            int y = l2 == null ? 0 : l2.val;
            // 和为 sum
            // 则 sum = x + y + carry
            int sum = x + y + carry;
            // 新的进位值 carry = sum / 10
            carry = sum / 10;
            // 答案链表相应位置的数字为 sum % 10
            cur.next = new ListNode(sum % 10);
            cur = cur.next;
            
            if(l1 != null){
                l1 = l1.next;
            }
            
            if(l2 != null){
                l2 = l2.next;
            }
        }
        
        return res.next;
    }
}