class Solution 
{
public:
    int maximalSquare(vector<vector<char>>& matrix) 
    {
        if(matrix.empty() || matrix[0].empty())
        {
            return 0;
        }
        
        int rows = matrix.size(), cols = matrix[0].size();
        
        vector<vector<int>> dp(rows, vector<int>(cols,0));
        // dp[i][j]表示以坐标i,j作为右下角的最大矩形边长
        
        int maxLen = 0;
        
        for(int i = 0 ; i<rows ; ++i)   // 初始化第一列
        {
            dp[i][0] = matrix[i][0] - '0';
            maxLen = max(maxLen, dp[i][0]);
        }
        
        for(int j = 0 ; j<cols ; ++j)    // 初始化第一行
        {
            dp[0][j] = matrix[0][j] - '0';
            maxLen = max(maxLen, dp[0][j]);
        }
        
        for(int i = 1 ; i<rows ; ++i)
        {
            for(int j = 1 ; j<cols ; ++j)
            {
                if(matrix[i][j] == '0')
                {
                    continue;
                }
                int len1 = dp[i-1][j];
                int len2 = dp[i][j-1];
                int len3 = dp[i-1][j-1];
                dp[i][j] = min(min(len1,len2),len3) + 1;
                
                maxLen = max(maxLen, dp[i][j]); // 满足条件的最大边长
            }
        }
        
        return maxLen * maxLen;
    }
};