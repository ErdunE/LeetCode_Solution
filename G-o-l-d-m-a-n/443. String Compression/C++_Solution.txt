class Solution 
{
public:
    int compress(vector<char>& chars) 
    {
        if (chars.empty()) //如果chars为空 return 0
        {
            return 0;
        }
        
        size_t j = 0; //设置 j 为写入指针
        int count = 0; //计数
        
        for (size_t i = 1; i <= chars.size(); i++)  //设置 i 为遍历指针
        {
            count++; 
            //当 chars[i] == chars[j] 时，说明字符一样，count++ 计数增加

            if (i == chars.size() || chars[i] != chars[j]) //当不等时，需要 j++ 把写入指针移到之后一个位置，准备写入数字
            {
                j++;
                if (count != 1) // 写入数字，注意考虑次数超过 1 位数的情况
                {
                    string scnt = to_string(count);
                    
                    for (auto c : scnt) 
                    {
                        chars[j++] = c;
                    }
                }

            if (i == chars.size())  
            {
                break;
            }
            chars[j] = chars[i];  // chars[j] = chars[i] 将填入数字之后的下一位等于下一个要压缩的字符
            count = 0;
            }
        }
        return j;
    }
};