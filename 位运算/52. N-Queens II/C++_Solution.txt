class Solution 
{
    
private:
    int count = 0;
    
    void backtracking(int n, int row, vector<string>& chessboard)
    {
        if(row == n)
        {
            count++;
            return;
        }
        
        for(int col=0 ; col<n ; col++)
        {
            if(isVaild(row,col,chessboard,n))
            {
                chessboard[row][col] = 'Q'; // 放置皇后
                backtracking(n, row+1, chessboard);
                chessboard[row][col] = '.'; // 回溯
            }
        }
    }
    
    bool isVaild(int row, int col, vector<string>& chessboard, int n)
    {
        int count = 0;
        for(int i=0 ; i<row ; i++)  // 检查列
        {
            if(chessboard[i][col]=='Q')// 这是一个剪枝
            {
                return false;
            }
        }
        
        for(int i=row-1, j=col-1; i>=0 && j>=0 ; i--,j--) // 检查 45度角是否有皇后
        {
            if(chessboard[i][j]=='Q')
            {
                return false;
            }
        }
        
        for(int i=row-1, j=col+1; i>=0 && j<n ; i--,j++) // 检查 135度角是否有皇后
        {
            if(chessboard[i][j]=='Q')
            {
                return false;
            }
        }
        
        return true;
    }
    
public:
    int totalNQueens(int n) 
    {
        std::vector<std::string> chessboard(n, std::string(n, '.'));
        backtracking(n, 0, chessboard);
        return count;
   }
};