class Solution 
{
public:
    int strStr(string haystack, string needle) 
    {
        int n = haystack.size();
        int m = needle.size();
        
        if(n < m) // 特殊情况判断
        {
            return -1;
        }
        if(m == 0) // 特殊情况判断
        {
            return 0;
        }
         
        int i = 0, j = 0; // 双指针，i指向haystack，j指向needle
        
        while(i < n)
        {
            if(haystack[i] == needle[j]) // 判断当前两个字符是否相等
            {         
                // 相等，则i，j自增1，若此时j越界，则找到索引
                i++;
                j++;
                if(j >= m)
                {
                    return i - j;
                }
            }
            else
            {
                // 不相等，判断j是否越界
                if(j < m)
                {
                    //未越界，则i重置为haystack中与needle的第一个字符相等的第一个字符位置的后一位，j重置为0
                    i = i - j + 1;
                    j = 0;
                }
                else
                {
                    // 越界，i自增1
                    i++;
                }
            }
        }
        return -1;
    }
};